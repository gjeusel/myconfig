# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt


# File Skeleton

snippet vsetup "vue RFC script setup" b
<script setup lang="ts">
</script>

<template>
	<div></div>
</template>
endsnippet

snippet vbase "vue skeleton" b
<template>
	<div></div>
</template>

<script lang="ts">
import { defineComponent } from "vue"

export default defineComponent({
	name: "`!p snip.rv = snip.basename`",
	props: {},
	components: {},
	setup() {
		return {}
	},
})
</script>

<style scoped lang="postcss">
/* Style */
</style>
endsnippet

# Conditional Flow

snippet vfor "v-for" b
<div v-for="(${0:item}, i) in ${1:items}" :key="i">
</div>
endsnippet

snippet vif "v-if" b
<div v-if="${1}">
</div>
endsnippet

snippet velse "v-else" b
<div v-else>
</div>
endsnippet

# Slots

snippet slot "slot" b
<slot name="${0:default}" />
endsnippet

snippet tslot "template slot" b
<template v-slot:${0}>
</template>
endsnippet

# Components

snippet fa "font awesome vite-icon" b
<i-fa-solid-${0:search} class="h-5" />
endsnippet

snippet suspense "suspense tags" b
<Suspense>
	<template #default>
		<div />
	</template>
	<template #fallback>
		<div />
	</template>
</Suspense>
endsnippet

# Imports

snippet "import vue" "import vue" b
import { defineComponent, ref, computed } from "vue"
endsnippet

snippet "import store" "import store" b
import { ${0:useMainStore} } from "@/store"
endsnippet
