NIX-SHELL(1)                   Command Reference                  NIX-SHELL(1)



NAME
       nix-shell - start an interactive shell based on a Nix expression

SYNOPSIS
       nix-shell [--arg name value] [--argstr name value]
                 [{--attr | -A} attrPath] [--command cmd] [--run cmd]
                 [--exclude regexp] [--pure] {[--packages | -p]packages |
                 [path]}

DESCRIPTION
       The command nix-shell will build the dependencies of the specified
       derivation, but not the derivation itself. It will then start an
       interactive shell in which all environment variables defined by the
       derivation path have been set to their corresponding values, and the
       script $stdenv/setup has been sourced. This is useful for reproducing
       the environment of a derivation for development.

       If path is not given, nix-shell defaults to shell.nix if it exists, and
       default.nix otherwise.

       If path starts with http:// or https://, it is interpreted as the URL
       of a tarball that will be downloaded and unpacked to a temporary
       location. The tarball must include a single top-level directory
       containing at least a file named default.nix.

       If the derivation defines the variable shellHook, it will be evaluated
       after $stdenv/setup has been sourced. Since this hook is not executed
       by regular Nix builds, it allows you to perform initialisation specific
       to nix-shell. For example, the derivation attribute

           shellHook =
             ''
               echo "Hello shell"
             '';

       will cause nix-shell to print Hello shell.

OPTIONS
       All options not listed here are passed to nix-store --realise, except
       for --arg and --attr / -A which are passed to nix-instantiate.

       --command cmd
           In the environment of the derivation, run the shell command cmd.
           This command is executed in an interactive shell. (Use --run to use
           a non-interactive shell instead.) However, a call to exit is
           implicitly added to the command, so the shell will exit after
           running the command. To prevent this, add return at the end; e.g.
           --command "echo Hello; return" will print Hello and then drop you
           into the interactive shell. This can be useful for doing any
           additional initialisation.

       --run cmd
           Like --command, but executes the command in a non-interactive
           shell. This means (among other things) that if you hit Ctrl-C while
           the command is running, the shell exits.

       --exclude regexp
           Do not build any dependencies whose store path matches the regular
           expression regexp. This option may be specified multiple times.

       --pure
           If this flag is specified, the environment is almost entirely
           cleared before the interactive shell is started, so you get an
           environment that more closely corresponds to the “real” Nix build.
           A few variables, in particular HOME, USER and DISPLAY, are
           retained. Note that ~/.bashrc and (depending on your Bash
           installation) /etc/bashrc are still sourced, so any variables set
           there will affect the interactive shell.

       --packages / -p
           Set up an environment in which the specified packages are present.
           The command line arguments are interpreted as attribute names
           inside the Nix Packages collection. Thus, nix-shell -p libjpeg
           openjdk will start a shell in which the packages denoted by the
           attribute names libjpeg and openjdk are present.

       -i interpreter
           The chained script interpreter to be invoked by nix-shell. Only
           applicable in #!-scripts (described below).

       The following common options are supported:

       --help
           Prints out a summary of the command syntax and exits.

       --version
           Prints out the Nix version number on standard output and exits.

       --verbose, -v
           Increases the level of verbosity of diagnostic messages printed on
           standard error. For each Nix operation, the information printed on
           standard output is well-defined; any diagnostic information is
           printed on standard error, never on standard output.

           This option may be specified repeatedly. Currently, the following
           verbosity levels exist:

           0
               “Errors only”: only print messages explaining why the Nix
               invocation failed.

           1
               “Informational”: print useful messages about what Nix is doing.
               This is the default.

           2
               “Talkative”: print more informational messages.

           3
               “Chatty”: print even more informational messages.

           4
               “Debug”: print debug information.

           5
               “Vomit”: print vast amounts of debug information.

       --no-build-output, -Q
           By default, output written by builders to standard output and
           standard error is echoed to the Nix command's standard error. This
           option suppresses this behaviour. Note that the builder's standard
           output and error are always written to a log file in
           prefix/nix/var/log/nix.

       --max-jobs, -j
           Sets the maximum number of build jobs that Nix will perform in
           parallel to the specified number. The default is specified by the
           build-max-jobs configuration setting, which itself defaults to 1. A
           higher value is useful on SMP systems or to exploit I/O latency.

       --cores
           Sets the value of the NIX_BUILD_CORES environment variable in the
           invocation of builders. Builders can use this variable at their
           discretion to control the maximum amount of parallelism. For
           instance, in Nixpkgs, if the derivation attribute
           enableParallelBuilding is set to true, the builder passes the -jN
           flag to GNU Make. It defaults to the value of the build-cores
           configuration setting, if set, or 1 otherwise. The value 0 means
           that the builder should use all available CPU cores in the system.

       --max-silent-time
           Sets the maximum number of seconds that a builder can go without
           producing any data on standard output or standard error. The
           default is specified by the build-max-silent-time configuration
           setting.  0 means no time-out.

       --timeout
           Sets the maximum number of seconds that a builder can run. The
           default is specified by the build-timeout configuration setting.  0
           means no timeout.

       --keep-going, -k
           Keep going in case of failed builds, to the greatest extent
           possible. That is, if building an input of some derivation fails,
           Nix will still build the other inputs, but not the derivation
           itself. Without this option, Nix stops if any build fails (except
           for builds of substitutes), possibly killing builds in progress (in
           case of parallel or distributed builds).

       --keep-failed, -K
           Specifies that in case of a build failure, the temporary directory
           (usually in /tmp) in which the build takes place should not be
           deleted. The path of the build directory is printed as an
           informational message.

       --fallback
           Whenever Nix attempts to build a derivation for which substitutes
           are known for each output path, but realising the output paths
           through the substitutes fails, fall back on building the
           derivation.

           The most common scenario in which this is useful is when we have
           registered substitutes in order to perform binary distribution
           from, say, a network repository. If the repository is down, the
           realisation of the derivation will fail. When this option is
           specified, Nix will build the derivation instead. Thus,
           installation from binaries falls back on installation from source.
           This option is not the default since it is generally not desirable
           for a transient failure in obtaining the substitutes to lead to a
           full build from source (with the related consumption of resources).

       --readonly-mode
           When this option is used, no attempt is made to open the Nix
           database. Most Nix operations do need database access, so those
           operations will fail.

       --log-type type
           This option determines how the output written to standard error is
           formatted. Nix’s diagnostic messages are typically nested. For
           instance, when tracing Nix expression evaluation (nix-env -vvvvv,
           messages from subexpressions are nested inside their parent
           expressions. Nix builder output is also often nested. For instance,
           the Nix Packages generic builder nests the various build tasks
           (unpack, configure, compile, etc.), and the GNU Make in
           stdenv-linux has been patched to provide nesting for recursive Make
           invocations.

           type can be one of the following:

           pretty
               Pretty-print the output, indicating different nesting levels
               using spaces. This is the default.

           escapes
               Indicate nesting using escape codes that can be interpreted by
               the nix-log2xml tool in the Nix source distribution. The
               resulting XML file can be fed into the log2html.xsl stylesheet
               to create an HTML file that can be browsed interactively, using
               JavaScript to expand and collapse parts of the output.

           flat
               Remove all nesting.


       --arg name value
           This option is accepted by nix-env, nix-instantiate and nix-build.
           When evaluating Nix expressions, the expression evaluator will
           automatically try to call functions that it encounters. It can
           automatically call functions for which every argument has a default
           value (e.g., { argName ? defaultValue }: ...). With --arg, you can
           also call functions that have arguments without a default value (or
           override a default value). That is, if the evaluator encounters a
           function with an argument named name, it will call it with value
           value.

           For instance, the file pkgs/top-level/all-packages.nix in Nixpkgs
           is actually a function:

               { # The system (e.g., `i686-linux') for which to build the packages.
                 system ? builtins.currentSystem
                 ...
               }: ...

           So if you call this Nix expression (e.g., when you do nix-env -i
           pkgname), the function will be called automatically using the value
           builtins.currentSystem for the system argument. You can override
           this using --arg, e.g., nix-env -i pkgname --arg system
           \"i686-freebsd\". (Note that since the argument is a Nix string
           literal, you have to escape the quotes.)

       --argstr name value
           This option is like --arg, only the value is not a Nix expression
           but a string. So instead of --arg system \"i686-linux\" (the outer
           quotes are to keep the shell happy) you can say --argstr system
           i686-linux.

       --attr / -A attrPath
           Select an attribute from the top-level Nix expression being
           evaluated. (nix-env, nix-instantiate, nix-build and nix-shell
           only.) The attribute pathattrPath is a sequence of attribute names
           separated by dots. For instance, given a top-level Nix expression
           e, the attribute path xorg.xorgserver would cause the expression
           e.xorg.xorgserver to be used. See nix-env --install for some
           concrete examples.

           In addition to attribute names, you can also specify array indices.
           For instance, the attribute path foo.3.bar selects the bar
           attribute of the fourth element of the array in the foo attribute
           of the top-level expression.

       --expr / -E
           Interpret the command line arguments as a list of Nix expressions
           to be parsed and evaluated, rather than as a list of file names of
           Nix expressions. (nix-instantiate, nix-build and nix-shell only.)

       --show-trace
           Causes Nix to print out a stack trace in case of Nix expression
           evaluation errors.

       -I path
           Add a path to the Nix expression search path. This option may be
           given multiple times. See the NIX_PATH environment variable for
           information on the semantics of the Nix search path. Paths added
           through -I take precedence over NIX_PATH.

       --option name value
           Set the Nix configuration option name to value. This overrides
           settings in the Nix configuration file (see nix.conf(5)).

       --repair
           Fix corrupted or missing store paths by redownloading or rebuilding
           them. Note that this is slow because it requires computing a
           cryptographic hash of the contents of every path in the closure of
           the build. Also note the warning under nix-store --repair-path.

ENVIRONMENT VARIABLES
       NIX_BUILD_SHELL
           Shell used to start the interactive environment. Defaults to the
           bash found in PATH.

EXAMPLES
       To build the dependencies of the package Pan, and start an interactive
       shell in which to build it:

           $ nix-shell '<nixpkgs>' -A pan
           [nix-shell]$ unpackPhase
           [nix-shell]$ cd pan-*
           [nix-shell]$ configurePhase
           [nix-shell]$ buildPhase
           [nix-shell]$ ./pan/gui/pan

       To clear the environment first, and do some additional automatic
       initialisation of the interactive shell:

           $ nix-shell '<nixpkgs>' -A pan --pure \
               --command 'export NIX_DEBUG=1; export NIX_CORES=8; return'

       Nix expressions can also be given on the command line. For instance,
       the following starts a shell containing the packages sqlite and libX11:

           $ nix-shell -E 'with import <nixpkgs> { }; runCommand "dummy" { buildInputs = [ sqlite xorg.libX11 ]; } ""'

       A shorter way to do the same is:

           $ nix-shell -p sqlite xorg.libX11
           [nix-shell]$ echo $NIX_LDFLAGS
           ... -L/nix/store/j1zg5v...-sqlite-3.8.0.2/lib -L/nix/store/0gmcz9...-libX11-1.6.1/lib ...

       The -p flag looks up Nixpkgs in the Nix search path. You can override
       it by passing -I or setting NIX_PATH. For example, the following gives
       you a shell containing the Pan package from a specific revision of
       Nixpkgs:

           $ nix-shell -p pan -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/8a3eea054838b55aca962c3fbde9c83c102b8bf2.tar.gz

           [nix-shell:~]$ pan --version
           Pan 0.139


USE AS A #!-INTERPRETER
       You can use nix-shell as a script interpreter to allow scripts written
       in arbitrary languages to obtain their own dependencies via Nix. This
       is done by starting the script with the following lines:

           #! /usr/bin/env nix-shell
           #! nix-shell -i real-interpreter -p packages

       where real-interpreter is the “real” script interpreter that will be
       invoked by nix-shell after it has obtained the dependencies and
       initialised the environment, and packages are the attribute names of
       the dependencies in Nixpkgs.

       The lines starting with #! nix-shell specify nix-shell options (see
       above). Note that you cannot write #1 /usr/bin/env nix-shell -i ...
       because many operating systems only allow one argument in #!  lines.

       For example, here is a Python script that depends on Python and the
       prettytable package:

           #! /usr/bin/env nix-shell
           #! nix-shell -i python -p python pythonPackages.prettytable

           import prettytable

           # Print a simple table.
           t = prettytable.PrettyTable(["N", "N^2"])
           for n in range(1, 10): t.add_row([n, n * n])
           print t

       Similarly, the following is a Perl script that specifies that it
       requires Perl and the HTML::TokeParser::Simple and LWP packages:

           #! /usr/bin/env nix-shell
           #! nix-shell -i perl -p perl perlPackages.HTMLTokeParserSimple perlPackages.LWP

           use HTML::TokeParser::Simple;

           # Fetch nixos.org and print all hrefs.
           my $p = HTML::TokeParser::Simple->new(url => 'http://nixos.org/');

           while (my $token = $p->get_tag("a")) {
               my $href = $token->get_attr("href");
               print "$href\n" if $href;
           }

       Finally, the following Haskell script uses a specific branch of
       Nixpkgs/NixOS (the 14.12 stable branch):

           #! /usr/bin/env nix-shell
           #! nix-shell -i runghc -p haskellPackages.ghc haskellPackages.HTTP haskellPackages.tagsoup
           #! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz

           import Network.HTTP
           import Text.HTML.TagSoup

           -- Fetch nixos.org and print all hrefs.
           main = do
             resp <- Network.HTTP.simpleHTTP (getRequest "http://nixos.org/")
             body <- getResponseBody resp
             let tags = filter (isTagOpenName "a") $ parseTags body
             let tags' = map (fromAttrib "href") tags
             mapM_ putStrLn $ filter (/= "") tags'

       If you want to be even more precise, you can specify a specific
       revision of Nixpkgs:

           #! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/0672315759b3e15e2121365f067c1c8c56bb4722.tar.gz

       The examples above all used -p to get dependencies from Nixpkgs. You
       can also use a Nix expression to build your own dependencies. For
       example, the Python example could have been written as:

           #! /usr/bin/env nix-shell
           #! nix-shell deps.nix -i python

       where the file deps.nix in the same directory as the #!-script
       contains:

           with import <nixpkgs> {};

           runCommand "dummy" { buildInputs = [ python pythonPackages.prettytable ]; } ""


ENVIRONMENT VARIABLES
       NIX_PATH
           A colon-separated list of directories used to look up Nix
           expressions enclosed in angle brackets (i.e., <path>). For
           instance, the value

               /home/eelco/Dev:/etc/nixos

           will cause Nix to look for paths relative to /home/eelco/Dev and
           /etc/nixos, in that order. It is also possible to match paths
           against a prefix. For example, the value

               nixpkgs=/home/eelco/Dev/nixpkgs-branch:/etc/nixos

           will cause Nix to search for <nixpkgs/path> in
           /home/eelco/Dev/nixpkgs-branch/path and /etc/nixos/nixpkgs/path.

           If a path in the Nix search path starts with http:// or https://,
           it is interpreted as the URL of a tarball that will be downloaded
           and unpacked to a temporary location. The tarball must consist of a
           single top-level directory. For example, setting NIX_PATH to

               nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-14.12.tar.gz

           tells Nix to download the latest revision in the Nixpkgs/NixOS
           14.12 channel.

           The search path can be extended using the -I option, which takes
           precedence over NIX_PATH.

       NIX_IGNORE_SYMLINK_STORE
           Normally, the Nix store directory (typically /nix/store) is not
           allowed to contain any symlink components. This is to prevent
           “impure” builds. Builders sometimes “canonicalise” paths by
           resolving all symlink components. Thus, builds on different
           machines (with /nix/store resolving to different locations) could
           yield different results. This is generally not a problem, except
           when builds are deployed to machines where /nix/store resolves
           differently. If you are sure that you’re not going to do that, you
           can set NIX_IGNORE_SYMLINK_STORE to 1.

           Note that if you’re symlinking the Nix store so that you can put it
           on another file system than the root file system, on Linux you’re
           better off using bind mount points, e.g.,

               $ mkdir /nix
               $ mount -o bind /mnt/otherdisk/nix /nix

           Consult the mount(8) manual page for details.

       NIX_STORE_DIR
           Overrides the location of the Nix store (default prefix/store).

       NIX_DATA_DIR
           Overrides the location of the Nix static data directory (default
           prefix/share).

       NIX_LOG_DIR
           Overrides the location of the Nix log directory (default
           prefix/log/nix).

       NIX_STATE_DIR
           Overrides the location of the Nix state directory (default
           prefix/var/nix).

       NIX_DB_DIR
           Overrides the location of the Nix database (default
           $NIX_STATE_DIR/db, i.e., prefix/var/nix/db).

       NIX_CONF_DIR
           Overrides the location of the Nix configuration directory (default
           prefix/etc/nix).

       TMPDIR
           Use the specified directory to store temporary files. In
           particular, this includes temporary build directories; these can
           take up substantial amounts of disk space. The default is /tmp.

       NIX_BUILD_HOOK
           Specifies the location of the build hook, which is a program
           (typically some script) that Nix will call whenever it wants to
           build a derivation. This is used to implement distributed builds.

       NIX_REMOTE
           This variable should be set to daemon if you want to use the Nix
           daemon to execute Nix operations. This is necessary in multi-user
           Nix installations. Otherwise, it should be left unset.

       NIX_SHOW_STATS
           If set to 1, Nix will print some evaluation statistics, such as the
           number of values allocated.

       NIX_COUNT_CALLS
           If set to 1, Nix will print how often functions were called during
           Nix expression evaluation. This is useful for profiling your Nix
           expressions.

       GC_INITIAL_HEAP_SIZE
           If Nix has been configured to use the Boehm garbage collector, this
           variable sets the initial size of the heap in bytes. It defaults to
           384 MiB. Setting it to a low value reduces memory consumption, but
           will increase runtime due to the overhead of garbage collection.

AUTHOR
       Eelco Dolstra
       LogicBlox
           Author

COPYRIGHT
       Copyright © 2004-2014 Eelco Dolstra



Nix 1.11.1                       November 2014                    NIX-SHELL(1)
